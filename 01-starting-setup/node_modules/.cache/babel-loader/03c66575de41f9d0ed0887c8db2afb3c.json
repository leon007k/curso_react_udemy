{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\curso_react_udemy\\\\01-starting-setup\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseForm(props) {\n  _s();\n\n  /**\r\n   * # REACT HOOKS\r\n   * * para este caso usamos los estados para guardar el valor que ha ingresado el usuario,\r\n   * * y poder enviarlo posteriormente\r\n   */\n  // ! Forma 1, de manejar varios estados \n\n  /* const [enteredTitle, setEnteredTitle] = useState('');\r\n  const [enteredNumber, setEnteredNumber] = useState('');\r\n  const [enteredDate, setEnteredDate] = useState('');\r\n    const titleChangeHandler = (evt) => { setEnteredTitle(evt.target.value); }\r\n    const numberChangeHandler = (evt) => { setEnteredNumber(evt.target.value); }\r\n    const dateChangeHandler = (evt) => { setEnteredDate(evt.target.target); } */\n  // ! Forma 2 de manejar varios estados. Estos se manejan como un objeto\n  // * funciones para obtener los valores ingresados\n  const [userInput, setUserInput] = useState({\n    enteredTitle: '',\n    enteredNumber: '',\n    enteredDate: ''\n  });\n\n  const titleChangeHandler = evt => {\n    /* setUserInput({\r\n      ...userInput,\r\n      enteredTitle: evt.target.value\r\n    }); */\n\n    /**\r\n     * ! Para realizar un cambio de estado, cada uno de ellos depende del otro. Para evitar tener problemas\r\n     * ! en que algun estado no cambie, se debe hacer de la siguiente manera\r\n     */\n    setUserInput(prevState => {\n      return { ...prevState,\n        enteredTitle: evt.target.value\n      };\n    });\n  };\n\n  const numberChangeHandler = evt => {\n    /* setUserInput({\r\n      ...userInput,\r\n      enteredNumber: evt.target.value\r\n    }); */\n    setUserInput(prevState => {\n      return { ...prevState,\n        enteredNumber: evt.target.value\n      };\n    });\n  };\n\n  const dateChangeHandler = evt => {\n    setUserInput({ ...userInput,\n      enteredDate: evt.target.value\n    });\n  }; // * evento para enviar los datos del formulario\n\n\n  const submitHandler = evt => {\n    evt.preventDefault();\n    const expenseData = {\n      title: userInput.enteredTitle,\n      amount: userInput.enteredNumber,\n      date: new Date(userInput.enteredDate)\n    };\n    props.onSaveExpenseData(expenseData); // @ Una vez ingresados los valores, vaciamos los inputs\n\n    setUserInput({\n      enteredTitle: '',\n      enteredNumber: '',\n      enteredDate: ''\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense_control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Titulo \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput.enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense_control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Cantidad \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: userInput.enteredNumber,\n          onChange: numberChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense_control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Fecha \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2022-01-01\",\n          max: \"2025-12-30\",\n          value: userInput.enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Agregar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ExpenseForm, \"6Q7EmJCkXX3L1JHEfaVWxqToL+o=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","props","userInput","setUserInput","enteredTitle","enteredNumber","enteredDate","titleChangeHandler","evt","prevState","target","value","numberChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData"],"sources":["C:/wamp64/www/curso_react_udemy/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './ExpenseForm.css';\r\n\r\nfunction ExpenseForm(props) {\r\n  /**\r\n   * # REACT HOOKS\r\n   * * para este caso usamos los estados para guardar el valor que ha ingresado el usuario,\r\n   * * y poder enviarlo posteriormente\r\n   */\r\n  // ! Forma 1, de manejar varios estados \r\n  /* const [enteredTitle, setEnteredTitle] = useState('');\r\n  const [enteredNumber, setEnteredNumber] = useState('');\r\n  const [enteredDate, setEnteredDate] = useState('');\r\n\r\n  const titleChangeHandler = (evt) => { setEnteredTitle(evt.target.value); }\r\n\r\n  const numberChangeHandler = (evt) => { setEnteredNumber(evt.target.value); }\r\n\r\n  const dateChangeHandler = (evt) => { setEnteredDate(evt.target.target); } */\r\n\r\n  // ! Forma 2 de manejar varios estados. Estos se manejan como un objeto\r\n  // * funciones para obtener los valores ingresados\r\n  const [userInput, setUserInput] = useState({\r\n    enteredTitle: '',\r\n    enteredNumber: '',\r\n    enteredDate: ''\r\n  }\r\n  );\r\n\r\n  const titleChangeHandler = (evt) => {\r\n    /* setUserInput({\r\n      ...userInput,\r\n      enteredTitle: evt.target.value\r\n    }); */\r\n    /**\r\n     * ! Para realizar un cambio de estado, cada uno de ellos depende del otro. Para evitar tener problemas\r\n     * ! en que algun estado no cambie, se debe hacer de la siguiente manera\r\n     */\r\n    setUserInput((prevState) => {\r\n      return { ...prevState, enteredTitle: evt.target.value };\r\n    });\r\n  };\r\n\r\n  const numberChangeHandler = (evt) => {\r\n    /* setUserInput({\r\n      ...userInput,\r\n      enteredNumber: evt.target.value\r\n    }); */\r\n    setUserInput((prevState) => {\r\n      return { ...prevState, enteredNumber: evt.target.value }\r\n    });\r\n  };\r\n\r\n  const dateChangeHandler = (evt) => {\r\n    setUserInput({\r\n      ...userInput,\r\n      enteredDate: evt.target.value\r\n    });\r\n  };\r\n\r\n  // * evento para enviar los datos del formulario\r\n  const submitHandler = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    const expenseData = {\r\n      title: userInput.enteredTitle,\r\n      amount: userInput.enteredNumber,\r\n      date: new Date(userInput.enteredDate)\r\n    };\r\n\r\n    props.onSaveExpenseData(expenseData);\r\n\r\n    // @ Una vez ingresados los valores, vaciamos los inputs\r\n    setUserInput({\r\n      enteredTitle: '',\r\n      enteredNumber: '',\r\n      enteredDate: ''\r\n    });\r\n\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense_control\">\r\n          <label>Titulo </label>\r\n          <input type=\"text\" value={userInput.enteredTitle} onChange={titleChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense_control\">\r\n          <label>Cantidad </label>\r\n          <input type=\"number\" min=\"0.01\" step=\"0.01\" value={userInput.enteredNumber} onChange={numberChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense_control\">\r\n          <label>Fecha </label>\r\n          <input type=\"date\" min=\"2022-01-01\" max=\"2025-12-30\" value={userInput.enteredDate} onChange={dateChangeHandler} />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"submit\">Agregar</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ExpenseForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}