{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\curso_react_udemy\\\\first_proyect_practice\\\\src\\\\components\\\\UserInfo\\\\UserInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport Card from \"../IU/Card\";\nimport Button from \"../IU/Button\";\nimport Modal from \"../IU/Modal\";\nimport style from \"./UserInfo.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UserInfo(props) {\n  _s();\n\n  /*\r\n  # REACT HOOKS - USEREF\r\n  * se usa principalmente para crear una referencia del elemento DOM \r\n  * o acceder directamente a el dentro de un componente funcional\r\n  * Devuelve un objeto de refenrencia mutable que llevara el valor a lo largo del componente\r\n  */\n  const nameInputRef = useRef(),\n        ageInputRef = useRef(); // * We validate that age is correct\n\n  const [isValid, setIsValid] = useState({\n    validName: true,\n    validAge: true\n  }); // * State to show a different message according to the error presented\n\n  const [errorMessage, setErrorMessage] = useState(''); // * Functions for data capture and shipping\n\n  const submitHandler = evt => {\n    evt.preventDefault();\n    /*\r\n    * El valor que nos devuelve este hook, lo podemos tomar de current.value\r\n    */\n\n    let enteredName = nameInputRef.current.value,\n        enteredAge = ageInputRef.current.value,\n        UserInfo;\n    debugger; // * Validation of the data entered\n\n    switch (true) {\n      case enteredName.trim().length === 0 && enteredAge.trim().length === 0:\n        setIsValid(prevData => {\n          return { ...prevData,\n            validName: false\n          };\n        });\n        setErrorMessage({\n          messageTitle: 'Datos incompletos',\n          messageBody: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Disculpe las molestias, requerimos que ingrese todos sus datos correctamente\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 24\n          }, this)\n        });\n        break;\n\n      case enteredName.trim().length === 0:\n        setIsValid(prevData => {\n          return { ...prevData,\n            validName: false\n          };\n        });\n        setErrorMessage({\n          messageTitle: 'Dato incompleto',\n          messageBody: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Disculpe las molestias, requerimos que ingrese su nombre completo correctamente\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 24\n          }, this)\n        });\n        break;\n\n      case enteredAge.trim().length === 0 || parseInt(enteredAge.trim()) < 1:\n        setIsValid(prevData => {\n          return { ...prevData,\n            validAge: false\n          };\n        });\n        break;\n\n      default:\n        // * We send the data only if they are correct\n        UserInfo = {\n          key: Math.random(),\n          name: enteredName,\n          age: enteredAge\n        };\n        props.onAddNewUser(UserInfo); // * Once the data is sent, we empty the fields\n\n        nameInputRef.current.value = '';\n        ageInputRef.current.value = '';\n        break;\n    }\n  };\n\n  const errorHandler = () => {\n    setErrorMessage(null);\n  };\n  /*\r\n    * Para mostral el modal, se hace uso de un estado, el cual contendra el mensaje del error presentado,\r\n    * validamos, que el error sea una \"cosa-thing\" y si lo es, entonces mostraras el modal, con el respectivo mensaje\r\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [errorMessage && /*#__PURE__*/_jsxDEV(Modal, {\n      messageTitle: errorMessage.messageTitle,\n      messageBody: errorMessage.messageBody,\n      closeModal: errorHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: style.add__newUser,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: style.add__newUser_inputContainer,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"userName\",\n              className: style.add__newUser_formLabel,\n              children: \"Nombre completo:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"userName\",\n              type: \"text\",\n              className: style.add__newUser_formControl,\n              ref: nameInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: style.add__newUser_inputContainer,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"userAge\",\n              className: style.add__newUser_formLabel,\n              children: \"Edad (a\\xF1os):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"userAge\",\n              className: `${style.add__newUser_formControl} ${!isValid.validAge && style.invalid}`,\n              ref: ageInputRef,\n              type: \"number\",\n              min: \"1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this), !isValid.validAge && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: style.add_newUser_formText,\n              children: \"Ingresa una edad correcta\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style.add__newUser_actions,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            className: style.add__newUser_success,\n            Message: \"Agregar usuario\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(UserInfo, \"/0QzvrVa3ChHAp/QgYHscFofr7w=\");\n\n_c = UserInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserInfo\");","map":{"version":3,"names":["React","useState","useRef","Card","Button","Modal","style","UserInfo","props","nameInputRef","ageInputRef","isValid","setIsValid","validName","validAge","errorMessage","setErrorMessage","submitHandler","evt","preventDefault","enteredName","current","value","enteredAge","trim","length","prevData","messageTitle","messageBody","parseInt","key","Math","random","name","age","onAddNewUser","errorHandler","add__newUser","add__newUser_inputContainer","add__newUser_formLabel","add__newUser_formControl","invalid","add_newUser_formText","add__newUser_actions","add__newUser_success"],"sources":["C:/wamp64/www/curso_react_udemy/first_proyect_practice/src/components/UserInfo/UserInfo.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport Card from \"../IU/Card\";\r\nimport Button from \"../IU/Button\";\r\nimport Modal from \"../IU/Modal\";\r\nimport style from \"./UserInfo.module.css\";\r\n\r\nexport default function UserInfo(props) {\r\n\r\n  /*\r\n  # REACT HOOKS - USEREF\r\n  * se usa principalmente para crear una referencia del elemento DOM \r\n  * o acceder directamente a el dentro de un componente funcional\r\n  * Devuelve un objeto de refenrencia mutable que llevara el valor a lo largo del componente\r\n  */\r\n  const nameInputRef = useRef(),\r\n    ageInputRef = useRef();\r\n\r\n  // * We validate that age is correct\r\n  const [isValid, setIsValid] = useState({\r\n    validName: true,\r\n    validAge: true\r\n  });\r\n\r\n  // * State to show a different message according to the error presented\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  // * Functions for data capture and shipping\r\n  const submitHandler = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    /*\r\n    * El valor que nos devuelve este hook, lo podemos tomar de current.value\r\n    */\r\n    let enteredName = nameInputRef.current.value,\r\n      enteredAge = ageInputRef.current.value,\r\n      UserInfo;\r\n    debugger\r\n    // * Validation of the data entered\r\n    switch (true) {\r\n      case (enteredName.trim().length === 0 && enteredAge.trim().length === 0):\r\n        setIsValid((prevData) => {\r\n          return {\r\n            ...prevData,\r\n            validName: false\r\n          }\r\n        });\r\n        setErrorMessage({\r\n          messageTitle: 'Datos incompletos',\r\n          messageBody: <p>Disculpe las molestias, requerimos que ingrese todos sus datos correctamente</p>\r\n        });\r\n        break;\r\n      case (enteredName.trim().length === 0):\r\n        setIsValid((prevData) => {\r\n          return {\r\n            ...prevData,\r\n            validName: false\r\n          }\r\n        });\r\n        setErrorMessage({\r\n          messageTitle: 'Dato incompleto',\r\n          messageBody: <p>Disculpe las molestias, requerimos que ingrese su nombre completo correctamente</p>\r\n        });\r\n        break;\r\n      case (enteredAge.trim().length === 0 || parseInt(enteredAge.trim()) < 1):\r\n        setIsValid((prevData) => {\r\n          return {\r\n            ...prevData,\r\n            validAge: false\r\n          }\r\n        });\r\n        break;\r\n      default:\r\n        // * We send the data only if they are correct\r\n        UserInfo = {\r\n          key: Math.random(),\r\n          name: enteredName,\r\n          age: enteredAge\r\n        };\r\n        props.onAddNewUser(UserInfo);\r\n        // * Once the data is sent, we empty the fields\r\n        nameInputRef.current.value = '';\r\n        ageInputRef.current.value = '';\r\n        break;\r\n    }\r\n  };\r\n\r\n  const errorHandler = () => {\r\n    setErrorMessage(null);\r\n  };\r\n  /*\r\n    * Para mostral el modal, se hace uso de un estado, el cual contendra el mensaje del error presentado,\r\n    * validamos, que el error sea una \"cosa-thing\" y si lo es, entonces mostraras el modal, con el respectivo mensaje\r\n   */\r\n  return (\r\n    <>\r\n      {errorMessage && <Modal messageTitle={errorMessage.messageTitle} messageBody={errorMessage.messageBody} closeModal={errorHandler} />}\r\n      <Card>\r\n        <form onSubmit={submitHandler}>\r\n          <div className={style.add__newUser}>\r\n            <div className={style.add__newUser_inputContainer}>\r\n              <label htmlFor=\"userName\" className={style.add__newUser_formLabel}>Nombre completo:</label>\r\n              <input id=\"userName\" type=\"text\"\r\n                className={style.add__newUser_formControl}\r\n                ref={nameInputRef}\r\n              />\r\n            </div>\r\n            <div className={style.add__newUser_inputContainer}>\r\n              <label htmlFor=\"userAge\" className={style.add__newUser_formLabel}>Edad (años):</label>\r\n              <input id=\"userAge\"\r\n                className={`${style.add__newUser_formControl} ${!isValid.validAge && style.invalid}`}\r\n                ref={ageInputRef}\r\n                type=\"number\" min=\"1\" />\r\n              {!isValid.validAge && <div className={style.add_newUser_formText}>Ingresa una edad correcta</div>}\r\n            </div>\r\n          </div>\r\n          <div className={style.add__newUser_actions}>\r\n            <Button type=\"submit\" className={style.add__newUser_success} Message={\"Agregar usuario\"} />\r\n          </div>\r\n        </form>\r\n      </Card>\r\n    </>\r\n  );\r\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EAAA;;EAEtC;AACF;AACA;AACA;AACA;AACA;EACE,MAAMC,YAAY,GAAGP,MAAM,EAA3B;EAAA,MACEQ,WAAW,GAAGR,MAAM,EADtB,CARsC,CAWtC;;EACA,MAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC;IACrCY,SAAS,EAAE,IAD0B;IAErCC,QAAQ,EAAE;EAF2B,CAAD,CAAtC,CAZsC,CAiBtC;;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,EAAD,CAAhD,CAlBsC,CAoBtC;;EACA,MAAMgB,aAAa,GAAIC,GAAD,IAAS;IAC7BA,GAAG,CAACC,cAAJ;IAEA;AACJ;AACA;;IACI,IAAIC,WAAW,GAAGX,YAAY,CAACY,OAAb,CAAqBC,KAAvC;IAAA,IACEC,UAAU,GAAGb,WAAW,CAACW,OAAZ,CAAoBC,KADnC;IAAA,IAEEf,QAFF;IAGA,SAT6B,CAU7B;;IACA,QAAQ,IAAR;MACE,KAAMa,WAAW,CAACI,IAAZ,GAAmBC,MAAnB,KAA8B,CAA9B,IAAmCF,UAAU,CAACC,IAAX,GAAkBC,MAAlB,KAA6B,CAAtE;QACEb,UAAU,CAAEc,QAAD,IAAc;UACvB,OAAO,EACL,GAAGA,QADE;YAELb,SAAS,EAAE;UAFN,CAAP;QAID,CALS,CAAV;QAMAG,eAAe,CAAC;UACdW,YAAY,EAAE,mBADA;UAEdC,WAAW,eAAE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAFC,CAAD,CAAf;QAIA;;MACF,KAAMR,WAAW,CAACI,IAAZ,GAAmBC,MAAnB,KAA8B,CAApC;QACEb,UAAU,CAAEc,QAAD,IAAc;UACvB,OAAO,EACL,GAAGA,QADE;YAELb,SAAS,EAAE;UAFN,CAAP;QAID,CALS,CAAV;QAMAG,eAAe,CAAC;UACdW,YAAY,EAAE,iBADA;UAEdC,WAAW,eAAE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAFC,CAAD,CAAf;QAIA;;MACF,KAAML,UAAU,CAACC,IAAX,GAAkBC,MAAlB,KAA6B,CAA7B,IAAkCI,QAAQ,CAACN,UAAU,CAACC,IAAX,EAAD,CAAR,GAA8B,CAAtE;QACEZ,UAAU,CAAEc,QAAD,IAAc;UACvB,OAAO,EACL,GAAGA,QADE;YAELZ,QAAQ,EAAE;UAFL,CAAP;QAID,CALS,CAAV;QAMA;;MACF;QACE;QACAP,QAAQ,GAAG;UACTuB,GAAG,EAAEC,IAAI,CAACC,MAAL,EADI;UAETC,IAAI,EAAEb,WAFG;UAGTc,GAAG,EAAEX;QAHI,CAAX;QAKAf,KAAK,CAAC2B,YAAN,CAAmB5B,QAAnB,EAPF,CAQE;;QACAE,YAAY,CAACY,OAAb,CAAqBC,KAArB,GAA6B,EAA7B;QACAZ,WAAW,CAACW,OAAZ,CAAoBC,KAApB,GAA4B,EAA5B;QACA;IA5CJ;EA8CD,CAzDD;;EA2DA,MAAMc,YAAY,GAAG,MAAM;IACzBpB,eAAe,CAAC,IAAD,CAAf;EACD,CAFD;EAGA;AACF;AACA;AACA;;;EACE,oBACE;IAAA,WACGD,YAAY,iBAAI,QAAC,KAAD;MAAO,YAAY,EAAEA,YAAY,CAACY,YAAlC;MAAgD,WAAW,EAAEZ,YAAY,CAACa,WAA1E;MAAuF,UAAU,EAAEQ;IAAnG;MAAA;MAAA;MAAA;IAAA,QADnB,eAEE,QAAC,IAAD;MAAA,uBACE;QAAM,QAAQ,EAAEnB,aAAhB;QAAA,wBACE;UAAK,SAAS,EAAEX,KAAK,CAAC+B,YAAtB;UAAA,wBACE;YAAK,SAAS,EAAE/B,KAAK,CAACgC,2BAAtB;YAAA,wBACE;cAAO,OAAO,EAAC,UAAf;cAA0B,SAAS,EAAEhC,KAAK,CAACiC,sBAA3C;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QADF,eAEE;cAAO,EAAE,EAAC,UAAV;cAAqB,IAAI,EAAC,MAA1B;cACE,SAAS,EAAEjC,KAAK,CAACkC,wBADnB;cAEE,GAAG,EAAE/B;YAFP;cAAA;cAAA;cAAA;YAAA,QAFF;UAAA;YAAA;YAAA;YAAA;UAAA,QADF,eAQE;YAAK,SAAS,EAAEH,KAAK,CAACgC,2BAAtB;YAAA,wBACE;cAAO,OAAO,EAAC,SAAf;cAAyB,SAAS,EAAEhC,KAAK,CAACiC,sBAA1C;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QADF,eAEE;cAAO,EAAE,EAAC,SAAV;cACE,SAAS,EAAG,GAAEjC,KAAK,CAACkC,wBAAyB,IAAG,CAAC7B,OAAO,CAACG,QAAT,IAAqBR,KAAK,CAACmC,OAAQ,EADrF;cAEE,GAAG,EAAE/B,WAFP;cAGE,IAAI,EAAC,QAHP;cAGgB,GAAG,EAAC;YAHpB;cAAA;cAAA;cAAA;YAAA,QAFF,EAMG,CAACC,OAAO,CAACG,QAAT,iBAAqB;cAAK,SAAS,EAAER,KAAK,CAACoC,oBAAtB;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QANxB;UAAA;YAAA;YAAA;YAAA;UAAA,QARF;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAkBE;UAAK,SAAS,EAAEpC,KAAK,CAACqC,oBAAtB;UAAA,uBACE,QAAC,MAAD;YAAQ,IAAI,EAAC,QAAb;YAAsB,SAAS,EAAErC,KAAK,CAACsC,oBAAvC;YAA6D,OAAO,EAAE;UAAtE;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QAlBF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA,gBADF;AA6BD;;GApHuBrC,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}