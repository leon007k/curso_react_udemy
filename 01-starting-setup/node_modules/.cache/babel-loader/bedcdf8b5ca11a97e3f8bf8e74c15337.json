{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\curso_react_udemy\\\\01-starting-setup\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n/**\n * ! Los nombres de los componentes deben comenzar con mayuscula. React los interpretara como componentes y no como elementos de html.\n */\nimport React, { useState } from 'react';\nimport Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\n/**\n * # Podemos obtener los datos dinamicamente, agregandolos dentro de nuestra funcion y pasarlos a nuestro componente\n * # como se muestra acontinuacion\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_EXPENSES = [{\n  id: 'e1',\n  title: 'lavado de auto',\n  amount: 140,\n  date: new Date(2022, 1, 18)\n}, {\n  id: 'e2',\n  title: 'lavado de tenis',\n  amount: 75,\n  date: new Date(2022, 4, 30)\n}, {\n  id: 'e3',\n  title: 'despensa pequeña',\n  amount: 201.50,\n  date: new Date(2022, 4, 20)\n}, {\n  id: 'e4',\n  title: 'proteina nitrotech',\n  amount: 998.50,\n  date: new Date(2021, 8, 15)\n}, {\n  id: 'e5',\n  title: 'Galletas Maria',\n  amount: 99.50,\n  date: new Date(2022, 9, 12)\n}];\n\nfunction App() {\n  _s();\n\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\n  /**¨\n   * * Para pasar los datos que se reciben un en archivo hijo, a otro archivo hijo(de una raiz a otra). Debemos mandar los datos\n   * * al archivo padre, para que este los mande al otro hijo, ya que no se puede hacer conexion entre archivos raiz separados, solo\n   * * se puede hacer entre archivos raiz que esten conectados en una misma linea\n   */\n\n  const addExpenseHandler = expense => {\n    setExpenses(prevExpenses => {\n      return [expense, ...prevExpenses];\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewExpense, {\n      onAddExpense: addExpenseHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Expenses, {\n      data: expenses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vWte2SAXNm+1bDonaLQzZSzOmNc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Expenses","NewExpense","DUMMY_EXPENSES","id","title","amount","date","Date","App","expenses","setExpenses","addExpenseHandler","expense","prevExpenses"],"sources":["C:/wamp64/www/curso_react_udemy/01-starting-setup/src/App.js"],"sourcesContent":["/**\n * ! Los nombres de los componentes deben comenzar con mayuscula. React los interpretara como componentes y no como elementos de html.\n */\nimport React, { useState } from 'react';\nimport Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\n\n/**\n * # Podemos obtener los datos dinamicamente, agregandolos dentro de nuestra funcion y pasarlos a nuestro componente\n * # como se muestra acontinuacion\n */\nconst DUMMY_EXPENSES = [\n  {\n    id: 'e1',\n    title: 'lavado de auto',\n    amount: 140,\n    date: new Date(2022, 1, 18)\n  },\n  {\n    id: 'e2',\n    title: 'lavado de tenis',\n    amount: 75,\n    date: new Date(2022, 4, 30)\n  },\n  {\n    id: 'e3',\n    title: 'despensa pequeña',\n    amount: 201.50,\n    date: new Date(2022, 4, 20)\n  },\n  {\n    id: 'e4',\n    title: 'proteina nitrotech',\n    amount: 998.50,\n    date: new Date(2021, 8, 15)\n  },\n  {\n    id: 'e5',\n    title: 'Galletas Maria',\n    amount: 99.50,\n    date: new Date(2022, 9, 12)\n  }\n];\n\nfunction App() {\n\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\n  /**¨\n   * * Para pasar los datos que se reciben un en archivo hijo, a otro archivo hijo(de una raiz a otra). Debemos mandar los datos\n   * * al archivo padre, para que este los mande al otro hijo, ya que no se puede hacer conexion entre archivos raiz separados, solo\n   * * se puede hacer entre archivos raiz que esten conectados en una misma linea\n   */\n  const addExpenseHandler = expense => {\n    setExpenses(prevExpenses => {\n      return [expense, ...prevExpenses];\n    });\n  };\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expenses data={expenses} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,cAAc,GAAG,CACrB;EACEC,EAAE,EAAE,IADN;EAEEC,KAAK,EAAE,gBAFT;EAGEC,MAAM,EAAE,GAHV;EAIEC,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,CADqB,EAOrB;EACEJ,EAAE,EAAE,IADN;EAEEC,KAAK,EAAE,iBAFT;EAGEC,MAAM,EAAE,EAHV;EAIEC,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,CAPqB,EAarB;EACEJ,EAAE,EAAE,IADN;EAEEC,KAAK,EAAE,kBAFT;EAGEC,MAAM,EAAE,MAHV;EAIEC,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,CAbqB,EAmBrB;EACEJ,EAAE,EAAE,IADN;EAEEC,KAAK,EAAE,oBAFT;EAGEC,MAAM,EAAE,MAHV;EAIEC,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,CAnBqB,EAyBrB;EACEJ,EAAE,EAAE,IADN;EAEEC,KAAK,EAAE,gBAFT;EAGEC,MAAM,EAAE,KAHV;EAIEC,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,CAzBqB,CAAvB;;AAiCA,SAASC,GAAT,GAAe;EAAA;;EAEb,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAACG,cAAD,CAAxC;EACA;AACF;AACA;AACA;AACA;;EACE,MAAMS,iBAAiB,GAAGC,OAAO,IAAI;IACnCF,WAAW,CAACG,YAAY,IAAI;MAC1B,OAAO,CAACD,OAAD,EAAU,GAAGC,YAAb,CAAP;IACD,CAFU,CAAX;EAGD,CAJD;;EAMA,oBACE;IAAA,wBACE,QAAC,UAAD;MAAY,YAAY,EAAEF;IAA1B;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,QAAD;MAAU,IAAI,EAAEF;IAAhB;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;GApBQD,G;;KAAAA,G;AAsBT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}